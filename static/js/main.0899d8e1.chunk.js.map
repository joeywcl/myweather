{"version":3,"sources":["components/Forecast/ForecastItem.module.css","components/Weather/HistoryItem.module.css","components/UI/Notification.module.css","components/Weather/History.module.css","components/UI/Card.module.css","components/Layout/MainHeader.module.css","components/Forecast/Forecasts.module.css","store/ui-slice.js","store/weather-slice.js","store/index.js","components/Weather/HistoryItem.js","components/UI/Card.js","components/Weather/History.js","components/Layout/MainHeader.js","components/Layout/Layout.js","components/Forecast/ForecastItem.js","components/Forecast/Forecasts.js","components/UI/Notification.js","App.js","store/weather-actions.js","index.js"],"names":["module","exports","uiSlice","createSlice","name","initialState","notificaton","reducers","showNotification","state","action","notification","status","payload","title","message","uiActions","actions","weatherSlice","items","changed","new","weatherData","getWeather","getHistory","replaceData","getWeatherData","myTime","dt","Date","toLocaleString","id","city","country","sys","weather","main","weatherDesc","description","maxTemp","temp_min","minTemp","temp_max","humidity","setTime","addItemToWeather","newItem","existingItem","find","item","toLocaleTimeString","unshift","removeItemFromWeather","filter","callWeather","newWeather","weatherActions","store","configureStore","reducer","ui","WeatherItem","props","dispatch","useDispatch","index","className","classes","leftDetails","details","onClick","Card","card","children","History","weatherItems","useSelector","history","length","map","empty","MainHeader","header","Layout","ForecastItem","weatherItem","cityRef","useRef","countryRef","formRef","ref","onSubmit","event","preventDefault","current","value","reset","inline","htmlFor","type","Object","keys","showWeather","iStyle","moreDetails","bold","small","Forecasts","Notification","specialClasses","error","success","cssClasses","isInitial","App","useEffect","a","fetchData","fetch","response","Error","json","data","sendRequest","method","body","JSON","stringify","ok","sendWeatherData","getData","res","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0899d8e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inline\":\"ForecastItem_inline__jS4Mu\",\"showWeather\":\"ForecastItem_showWeather__3OxXK\",\"iStyle\":\"ForecastItem_iStyle__wb7bC\",\"moreDetails\":\"ForecastItem_moreDetails___xx9R\",\"bold\":\"ForecastItem_bold__1x-F3\",\"small\":\"ForecastItem_small__R-WsU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"HistoryItem_item__3vzX9\",\"leftDetails\":\"HistoryItem_leftDetails__i6iSK\",\"details\":\"HistoryItem_details__1g25O\",\"actions\":\"HistoryItem_actions__1UTS8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__1D-ea\",\"error\":\"Notification_error__TUV2O\",\"success\":\"Notification_success__2sH-5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"History_history__1jTkK\",\"empty\":\"History_empty__TpWAG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__231gm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainHeader_header__1teeO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"Forecasts_weather__2eb2x\"};","import {createSlice} from '@reduxjs/toolkit';\r\n\r\n\r\nconst uiSlice = createSlice({\r\n    name: 'ui',\r\n    initialState: {notificaton: null},\r\n    reducers: {\r\n        showNotification(state, action) {\r\n            state.notification = {\r\n                status: action.payload.status,\r\n                title: action.payload.title,\r\n                message: action.payload.message\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const uiActions = uiSlice.actions;\r\nexport default uiSlice;","import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst weatherSlice = createSlice({\r\n    name: 'weather',\r\n    initialState: {\r\n        items: [],\r\n        changed: false,\r\n        new: false,\r\n        weatherData: {},\r\n        getWeather: {}\r\n    },\r\n    reducers: {\r\n        getHistory(state, action) {\r\n            state.items = action.payload.items;\r\n        },\r\n        replaceData(state, action) {\r\n            const getWeatherData = action.payload.getWeather;\r\n            let myTime = '';\r\n            if( getWeatherData.dt) {\r\n                myTime = new Date(getWeatherData.dt*1000).toLocaleString();\r\n            }\r\n\r\n            state.getWeather = {\r\n                id: getWeatherData.id,\r\n                city: getWeatherData.name,\r\n                country: getWeatherData.sys.country,\r\n                weather: getWeatherData.weather[0].main,\r\n                weatherDesc: getWeatherData.weather[0].description,\r\n                maxTemp: getWeatherData.main.temp_min,\r\n                minTemp: getWeatherData.main.temp_max,\r\n                humidity: getWeatherData.main.humidity,\r\n                setTime: myTime\r\n            };\r\n            state.weatherData = {};\r\n            state.new = false;\r\n            state.changed = false;\r\n        },\r\n        addItemToWeather(state, action) {\r\n            const newItem = action.payload;\r\n            const existingItem = state.items.find(item => item.id === newItem.id);\r\n            let myTime = '';\r\n            if( newItem.setTime) {\r\n                myTime = new Date(newItem.setTime*1000).toLocaleTimeString();\r\n            }\r\n\r\n            state.changed = true;\r\n            if (!existingItem) {\r\n                state.items.unshift({\r\n                    id: newItem.id,\r\n                    city: newItem.city,\r\n                    country: newItem.country,\r\n                    weather: newItem.weather,\r\n                    weatherDesc: newItem.weatherDesc,\r\n                    maxTemp: newItem.maxTemp,\r\n                    minTemp: newItem.minTemp,\r\n                    humidity: newItem.humidity,\r\n                    setTime: myTime\r\n                })\r\n            }\r\n        },\r\n        removeItemFromWeather(state, action) {\r\n            const id = action.payload;\r\n            const existingItem = state.items.find(item => item.id === id);\r\n            state.changed = true;\r\n            if (existingItem) {\r\n                state.items = state.items.filter(item => item.id !== id);\r\n            }\r\n        },\r\n        callWeather(state, action) {\r\n            const newWeather = action.payload;\r\n            state.new = true;\r\n            state.weatherData = {\r\n                city: newWeather.city,\r\n                country: newWeather.country,\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const weatherActions = weatherSlice.actions;\r\nexport default weatherSlice;\r\n","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport uiSlice from \"./ui-slice\";\r\nimport weatherSlice from \"./weather-slice\";\r\n\r\nconst store = configureStore({\r\n    reducer: {ui: uiSlice.reducer, weather: weatherSlice.reducer}\r\n});\r\n\r\nexport default store;","import {useDispatch} from \"react-redux\";\r\nimport {weatherActions} from \"../../store/weather-slice\";\r\nimport classes from './HistoryItem.module.css';\r\nimport { BiSearch } from \"react-icons/bi\";\r\nimport { MdOutlineDeleteForever } from \"react-icons/md\";\r\n\r\nconst WeatherItem = (props) => {\r\n    const dispatch = useDispatch();\r\n    const { index, id, city, country, setTime} = props.item;\r\n\r\n    const removeItemHandler = () => {\r\n        dispatch(weatherActions.removeItemFromWeather(id));\r\n    };\r\n\r\n    const addItemHandler = () => {\r\n        dispatch(weatherActions.callWeather({city, country}))\r\n    };\r\n\r\n    return (\r\n        <li className={classes.item}>\r\n            <div className={classes.leftDetails}>\r\n                <p> {index}. </p>\r\n                <p>{city} , {country}</p>\r\n            </div>\r\n            <div className={classes.details}>\r\n                <div className={classes.actions}>\r\n                    <p>{setTime}</p>\r\n                    <button onClick={addItemHandler}><BiSearch/></button>\r\n                    <button onClick={removeItemHandler}><MdOutlineDeleteForever/></button>\r\n\r\n                </div>\r\n            </div>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default WeatherItem;\r\n","import classes from './Card.module.css';\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <section\r\n      className={`${classes.card} ${props.className ? props.className : ''}`}\r\n    >\r\n      {props.children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import {useSelector} from \"react-redux\";\r\nimport WeatherItem from './HistoryItem';\r\nimport classes from './History.module.css';\r\nimport Card from '../UI/Card';\r\n\r\nconst History = () => {\r\n    const weatherItems = useSelector(state => state.weather.items);\r\n\r\n    return (\r\n        <Card className={classes.history}>\r\n            <h2>Search History</h2>\r\n            { weatherItems.length > 0 ? <ul>\r\n                {weatherItems.map((item, index) => <WeatherItem\r\n                    key={item.id}\r\n                    item={{\r\n                        index: index + 1,\r\n                        id: item.id,\r\n                        city: item.city,\r\n                        country: item.country,\r\n                        setTime: item.setTime\r\n                    }}\r\n                />)}\r\n            </ul>: <p className={classes.empty}>No Records</p>}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default History;\r\n","\r\nimport classes from './MainHeader.module.css';\r\n\r\nconst MainHeader = () => {\r\n  return (\r\n    <header className={classes.header}>\r\n      <h1>Today's Weather</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default MainHeader;\r\n","import { Fragment } from 'react';\r\nimport MainHeader from './MainHeader';\r\n\r\nconst Layout = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <MainHeader />\r\n      <main>{props.children}</main>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React, {useRef, Fragment} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {weatherActions} from \"../../store/weather-slice\";\r\n\r\nimport classes from './ForecastItem.module.css';\r\n\r\nconst ForecastItem = (props) => {\r\n    const {city, country, weather, weatherDesc, minTemp, maxTemp, humidity, setTime} = props.weatherItem;\r\n\r\n    const dispatch = useDispatch();\r\n    const cityRef = useRef('');\r\n    const countryRef = useRef('');\r\n    const formRef = useRef();\r\n\r\n\r\n    const addWeatherHandler = (event) => {\r\n        event.preventDefault();\r\n        dispatch(weatherActions.callWeather({\r\n            city: cityRef.current.value,\r\n            country: countryRef.current.value\r\n        }));\r\n        formRef.current.reset();\r\n    };\r\n\r\n    const clearHandler = (event) => {\r\n        event.preventDefault();\r\n        formRef.current.reset();\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <section className=\"container\">\r\n                <form ref={formRef} onSubmit={addWeatherHandler}>\r\n                    <div className={classes.inline}>\r\n                        <label htmlFor='city'>City : </label>\r\n                        <input type='text' name=\"city\" id='city' ref={cityRef}/>\r\n                    </div>\r\n                    <div className={classes.inline}>\r\n                        <label htmlFor='country'>Country : </label>\r\n                        <input type='text' name=\"country\" id='country' ref={countryRef}/>\r\n                    </div>\r\n                    <button type=\"submit\">Get Weather</button>\r\n                    <button onClick={clearHandler}>Clear</button>\r\n                </form>\r\n            </section>\r\n            {Object.keys(props.weatherItem).length !== 0 ? <section className=\"container\">\r\n                <div className={classes.showWeather}>\r\n                    <p>{city} , {country}</p>\r\n                    <h2>{weather}</h2>\r\n                    <p className={classes.iStyle}>{weatherDesc}</p>\r\n                    <div className={classes.moreDetails}>\r\n                        <div className=\"feels\">\r\n                           <p>{minTemp} &#8451; ~ {maxTemp} &#8451; °F</p>\r\n                            <p className={classes.bold}>Feels</p>\r\n                        </div>\r\n                        <div className=\"humidity\">\r\n                           <p>{humidity}%</p>\r\n                            <p className={classes.bold}>Humidity</p>\r\n                        </div>\r\n                    </div>\r\n                    <p className={classes.small}>Retrieve at: {setTime}</p>\r\n\r\n                </div>\r\n            </section> : null}\r\n        </Fragment>\r\n    );\r\n};\r\nexport default ForecastItem;\r\n\r\n","import {useSelector} from \"react-redux\";\r\n\r\n\r\nimport classes from './Forecasts.module.css';\r\nimport Card from \"../UI/Card\";\r\nimport ForecastItem from \"./ForecastItem\";\r\n\r\nconst Forecasts = () => {\r\n\r\n    const weatherItem = useSelector(state => state.weather.getWeather);\r\n\r\n    return (\r\n        <Card className={classes.weather}>\r\n\r\n            <ForecastItem weatherItem={weatherItem}/>\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Forecasts;\r\n","import classes from './Notification.module.css';\r\n\r\nconst Notification = (props) => {\r\n    let specialClasses = '';\r\n\r\n    if (props.status === 'error') {\r\n        specialClasses = classes.error;\r\n    }\r\n    if (props.status === 'success') {\r\n        specialClasses = classes.success;\r\n    }\r\n\r\n    const cssClasses = `${classes.notification} ${specialClasses}`;\r\n\r\n    return (\r\n        <section className={cssClasses}>\r\n            <h2>{props.title}</h2>\r\n            <p>{props.message}</p>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Notification;","import {Fragment, useEffect} from 'react';\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {fetchWeatherData, sendWeatherData, getWeatherData} from \"./store/weather-actions\";\r\nimport History from './components/Weather/History';\r\nimport Layout from './components/Layout/Layout';\r\nimport Forecasts from './components/Forecast/Forecasts';\r\nimport Notification from \"./components/UI/Notification\";\r\n\r\nlet isInitial = true;\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n    const weather = useSelector((state) => state.weather);\r\n    const notification = useSelector(state => state.ui.notification);\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(fetchWeatherData());\r\n\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (isInitial) {\r\n            isInitial = false;\r\n            return;\r\n        }\r\n\r\n        if (weather.changed) {\r\n            dispatch(sendWeatherData(weather));\r\n        }\r\n    }, [weather, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (isInitial) {\r\n            isInitial = false;\r\n            return;\r\n        }\r\n\r\n        if (weather.new) {\r\n            dispatch(getWeatherData(weather));\r\n        }\r\n    }, [weather, dispatch]);\r\n\r\n    return (\r\n        <Fragment>\r\n            {notification &&\r\n            <Notification\r\n                status={notification.status}\r\n                title={notification.title}\r\n                message={notification.message}\r\n            />}\r\n            <Layout>\r\n                <Forecasts/>\r\n                <History/>\r\n            </Layout>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {uiActions} from \"./ui-slice\";\r\nimport {weatherActions} from \"./weather-slice\";\r\n\r\nexport const fetchWeatherData = () => {\r\n    return async (dispatch) => {\r\n        const fetchData = async () => {\r\n            const response = await fetch(\r\n                'https://weatherhistory-77a26-default-rtdb.firebaseio.com/history.json'\r\n            );\r\n\r\n            if (!response) {\r\n                throw new Error('Unable to fetch history');\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n        };\r\n\r\n        try {\r\n            const weatherData = await fetchData();\r\n            dispatch(weatherActions.getHistory({\r\n                items: weatherData.items || []\r\n            }));\r\n        } catch (e) {\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'error',\r\n                    title: 'Retrieving History',\r\n                    message: 'No History Found'\r\n                }));\r\n        }\r\n    }\r\n};\r\n\r\nexport const sendWeatherData = (weather) => {\r\n    return async (dispatch) => {\r\n        dispatch(\r\n            uiActions.showNotification({\r\n                status: 'pending',\r\n                title: 'Retrieving...',\r\n                message: 'Retrieving your history list!'\r\n            }));\r\n\r\n        const sendRequest = async () => {\r\n            const response = await fetch('https://weatherhistory-77a26-default-rtdb.firebaseio.com/history.json', {\r\n                method: 'PUT',\r\n                body: JSON.stringify({\r\n                    items: weather.items\r\n                })\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Unable to update history')\r\n            }\r\n        };\r\n\r\n        try {\r\n            await sendRequest();\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'success',\r\n                    title: 'Success!',\r\n                    message: 'Fetching completed!'\r\n                }));\r\n        } catch (e) {\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'error',\r\n                    title: 'Error!',\r\n                    message: 'History not found!'\r\n                }));\r\n        }\r\n\r\n    }\r\n};\r\n\r\nexport const getWeatherData = (data) => {\r\n    const appid = 'ddd12c48007ccc04acae24afcdf70f62';\r\n    return async (dispatch) => {\r\n\r\n        const getData = async () => {\r\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${data.weatherData.city},${data.weatherData.country}&units=metric&appid=${appid}`);\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Weather forecast not found.')\r\n            }\r\n\r\n            const res = await response.json();\r\n\r\n\r\n            return res;\r\n        };\r\n        try {\r\n            const getWeather = await getData();\r\n            dispatch(weatherActions.replaceData({\r\n                getWeather: getWeather || {}\r\n            }));\r\n            dispatch(weatherActions.addItemToWeather({\r\n                id: getWeather.id,\r\n                city: getWeather.name,\r\n                country: getWeather.sys.country,\r\n                weather: getWeather.weather[0].main,\r\n                weatherDesc: getWeather.weather[0].description,\r\n                maxTemp: getWeather.main.temp_min,\r\n                minTemp: getWeather.main.temp_max,\r\n                humidity: getWeather.main.humidity,\r\n                setTime: getWeather.dt\r\n            }));\r\n        } catch (e) {\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                    status: 'error',\r\n                    title: 'Error!',\r\n                    message: 'Fetching weather data failed!'\r\n                }));\r\n        }\r\n    }\r\n};","import ReactDOM from 'react-dom';\r\nimport {Provider} from \"react-redux\";\r\n\r\nimport store from './store/index';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n"],"sourceRoot":""}